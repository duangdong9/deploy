(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{428:function(s,t,n){"use strict";n.r(t);var a=n(18),e=Object(a.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"关于docker相关命令"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#关于docker相关命令"}},[s._v("#")]),s._v(" 关于Docker相关命令")]),s._v(" "),n("h3",{attrs:{id:"使用时报错"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用时报错"}},[s._v("#")]),s._v(" 使用时报错")]),s._v(" "),n("blockquote",[n("p",[s._v("Got permission denied while trying to connect to the Docker daemon")])]),s._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("groupadd")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v("          "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#添加docker用户组")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" gpasswd -a "),n("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$USER")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#将当前用户添加至docker用户组")]),s._v("\nnewgrp "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v("                 "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#更新docker用户组")]),s._v("\n")])])]),n("h3",{attrs:{id:"docker-安装及设置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#docker-安装及设置"}},[s._v("#")]),s._v(" docker 安装及设置")]),s._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#安装 CentOS已经将Docker软件包放在了Extras软件源中，直接利用即可")]),s._v("\nyum "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" docker-io -y\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#查看docker的版本 version")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" -v\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#开启Docker服务")]),s._v("\nsystemctl start docker.service\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#开机启动Docker服务")]),s._v("\nsystemctl "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("enable")]),s._v(" docker.service\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#查看Docker服务启动状态")]),s._v("\nsystemctl status docker.service\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#重启Docker服务")]),s._v("\nsystemctl restart docker.service\n")])])]),n("h3",{attrs:{id:"docker-镜像文件和容器命令"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#docker-镜像文件和容器命令"}},[s._v("#")]),s._v(" docker 镜像文件和容器命令")]),s._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#搜索镜像")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" search 镜像名称\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#查看所有镜像")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" images\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#删除一个imageid的镜像")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" rmi "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("IMAE_ID"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" \n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#删除所有镜像")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" rmi "),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" images -q"),n("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v(" \n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#查看所有容器运行状态")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" -a    \n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" container "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" -all\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#删除一个containerid的容器(实例)")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" 6f0c67de4b72 \n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#删除所有容器")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" -a -q"),n("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("\n\n容器日志\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#查看指定时间后的日志，只显示最后100行：")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" logs -f -t --since"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"2019-06-08"')]),s._v(" --tail"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v(" CONTAINER_ID\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#查看某时间之后的日志：")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" logs -t --since"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"2019-06-08"')]),s._v(" CONTAINER_ID\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#查看某时间段日志：")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" logs -t --since"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"2019-06-08"')]),s._v(" --until "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"2019-06-09"')]),s._v(" CONTAINER_ID\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#查看最近30分钟的日志:")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" logs --since 30m CONTAINER_ID\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置启动策略, docker 容器自动启动（在容器退出或断电开机后，docker可以通过在容器创建时的 --restart 来指定重启策略）")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#--restart 参数：")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# no，不自动重启容器. (默认值)")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# on-failure，  容器发生error而退出(容器退出状态不为0)重启容器,可以指定重启的最大次数，如：on-failure:10")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# unless-stopped，  在容器已经stop掉或Docker stoped/restarted的时候才重启容器，手动stop的不算")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# always， 在容器已经stop掉或Docker stoped/restarted的时候才重启容器")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run --restart always -it -p "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("本机端口"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(":"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("容器端口"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("镜像名称"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#如果容器已经被创建，但处于停止状态，重新启动：")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" start "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("容器ID"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#如果容器已经被创建，我们想要修改容器的重启策略")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" update --restart always "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("容器ID"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),n("h3",{attrs:{id:"dockerfile操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile操作"}},[s._v("#")]),s._v(" Dockerfile操作")]),s._v(" "),n("div",{staticClass:"language-dockerfile extra-class"},[n("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[n("code",[n("span",{pre:!0,attrs:{class:"token instruction"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" nginx  # 定制的镜像都是基于 FROM 的镜像")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# RUN两种执行操作")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token instruction"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" <命令行命令>")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# <命令行命令> 等同于，在终端操作的 shell 命令")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token instruction"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" ["),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"可执行文件"')]),s._v(", "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"参数1"')]),s._v(", "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"参数2"')]),s._v("]")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 例如：")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# RUN ["./test.php", "dev", "offline"] 等价于 RUN ./test.php dev offline')]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Dockerfile 的指令每执行一次都会在 docker 上新建一层。所以过多无意义的层，会造成镜像膨胀过大")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token instruction"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" yum -y install wget")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token instruction"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" wget -O redis.tar.gz "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"http://download.redis.io/releases/redis-5.0.3.tar.gz"')])]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token instruction"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" tar -xvf redis.tar.gz")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 以 && 符号连接命令，这样执行后，只会创建 1 层镜像。")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token instruction"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" yum -y install wget "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),s._v("\n    && wget -O redis.tar.gz "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"http://download.redis.io/releases/redis-5.0.3.tar.gz"')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),s._v("\n    && tar -xvf redis.tar.gz")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果 Dockerfile 中如果存在多个 CMD 指令，仅最后一个生效")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# CMD 在docker run 时运行")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token instruction"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CMD")]),s._v(" <shell 命令> ")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token instruction"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CMD")]),s._v(" ["),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"<可执行文件或命令>"')]),s._v(","),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"<param1>"')]),s._v(","),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"<param2>"')]),s._v(",...] ")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token instruction"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CMD")]),s._v(" ["),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"<param1>"')]),s._v(","),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"<param2>"')]),s._v(",...]  # 该写法是为 ENTRYPOINT 指令指定的程序提供默认参数")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置环境变量，定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token instruction"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENV")]),s._v(" <key> <value>")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token instruction"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENV")]),s._v(" <key1>=<value1> <key2>=<value2>")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置 NODE_VERSION = 7.2.0 ， 在后续的指令中可以通过 $NODE_VERSION 引用")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token instruction"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENV")]),s._v(" NODE_VERSION 7.2.0")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token instruction"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" curl -SLO "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz"')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),s._v("\n  && curl -SLO "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc"')])]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ARG 设置的环境变量仅对 Dockerfile 内有效，也就是说只有 docker build 的过程中有效，构建好的镜像内不存在此环境变量。")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 构建命令 docker build 中可以用 --build-arg <参数名>=<值> 来覆盖")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token instruction"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ARG")]),s._v(" <参数名>[=<默认值>]")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 仅仅只是声明端口")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token instruction"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPOSE")]),s._v(" 80")]),s._v("\n")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);